{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","StopLoss","TwoPercentage","Percentage30","Percentage37","Percentage44","Percentage55","values","setValues","RoundNumber","Data","Number","toFixed","parseFloatIgnoreCommas","numb","numberNoCommas","replace","parseFloat","className","InputGroup","onChange","event","DataPoint","target","value","FormControl","placeholder","aria-label","aria-describedby","Append","Text","id","Table","striped","bordered","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SA+GeA,MA1Gf,WAAgB,IAAD,EAEeC,mBAC1B,CACAC,SAAU,EACVC,cAAe,EACfC,aAAa,EACbC,aAAa,EACbC,aAAa,EACbC,aAAc,IATH,mBAENC,EAFM,KAEEC,EAFF,KAyBRC,EAAc,SAACC,GACnB,OAAOC,OAAOD,EAAKE,QAAQ,KAEvBC,EAAyB,SAACC,GAC9B,GAAU,KAAPA,EAAW,OAAO,EACtB,IAAMC,EAAiBD,EAAKE,QAAQ,KAAM,KAC1C,OAAOC,WAAWF,IAIlBd,EAMIM,EANJN,SACAC,EAKIK,EALJL,cACAC,EAIII,EAJJJ,aACAC,EAGIG,EAHJH,aACAC,EAEIE,EAFJF,aACAC,EACIC,EADJD,aAEA,OAGE,yBAAKY,UAAU,OACb,yBAAKA,UAAU,kBACf,wBAAIA,UAAU,oBAAd,yBACA,kBAACC,EAAA,EAAD,CAAYD,UAAU,OAAOE,SApCb,SAACC,GACpB,IAAMC,EAAoBT,EAAuBQ,EAAME,OAAOC,OAE9DhB,EAAU,CACRP,SAAUQ,EAAsB,IAAVa,GACtBpB,cAAeO,EAAsB,MAAVa,GAC3BnB,aAAcM,EAAsB,KAAVa,GAC1BlB,aAAcK,EAAsB,MAAVa,GAC1BjB,aAAcI,EAAsB,MAAVa,GAC1BhB,aAAcG,EAAsB,MAAVa,OA4B3B,kBAACG,EAAA,EAAD,CACEC,YAAY,iBACZC,aAAW,iBACXC,mBAAiB,iBAEnB,kBAACT,EAAA,EAAWU,OAAZ,KACE,kBAACV,EAAA,EAAWW,KAAZ,CAAiBC,GAAG,gBAApB,OAIF,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,QAAQ,QAClC,+BACE,4BACE,0CACA,qCACA,yCAGJ,+BACE,wBAAIjB,UAAU,aACZ,yCACA,wBAAIA,UAAU,mBAAmBjB,GACjC,wBAAIiB,UAAU,kBAAd,sBAEF,wBAAIA,UAAU,cACZ,qCACA,wBAAIA,UAAU,mBAAmBhB,GACjC,wBAAIgB,UAAU,kBAAd,YAEF,wBAAIA,UAAU,cACZ,qCACA,wBAAIA,UAAU,mBAAmBf,GACjC,wBAAIe,UAAU,kBAAd,qBAEF,wBAAIA,UAAU,gBACZ,qCACA,wBAAIA,UAAU,mBAAmBd,GACjC,wBAAIc,UAAU,kBAAd,8CAEF,wBAAIA,UAAU,cACZ,qCACA,wBAAIA,UAAU,mBAAmBb,GACjC,wBAAIa,UAAU,kBAAiB,2BAAOA,UAAU,aAAjB,uBAA/B,4CAEF,wBAAIA,UAAU,sBACZ,oCACA,wBAAIA,UAAU,mBAAmBZ,GACjC,wBAAIY,UAAU,+BAAd,wEAIN,wBAAIA,UAAU,oBAAd,yDC7FoBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9302e693.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport Table from \"react-bootstrap/Table\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nfunction App() {\n\n  const [values, setValues] = useState(\n    { \n    StopLoss: 0, \n    TwoPercentage: 0, \n    Percentage30:0 ,\n    Percentage37:0, \n    Percentage44:0,\n    Percentage55: 0\n  });\n\n const updateValues = (event: any) =>{\n   const DataPoint: number = parseFloatIgnoreCommas(event.target.value);\n   \n   setValues({\n     StopLoss: RoundNumber(DataPoint*0.98),\n     TwoPercentage: RoundNumber(DataPoint*1.023),\n     Percentage30: RoundNumber(DataPoint*1.03),\n     Percentage37: RoundNumber(DataPoint*1.037),\n     Percentage44: RoundNumber(DataPoint*1.044),\n     Percentage55: RoundNumber(DataPoint*1.055)\n   });\n }\n\n const RoundNumber = (Data: number ) : number => {\n   return Number(Data.toFixed(3));\n }\n const parseFloatIgnoreCommas = (numb: string) : number => {\n   if(numb===\"\") return 0;\n  const numberNoCommas = numb.replace(/,/g, '.');\n  return parseFloat(numberNoCommas);\n}\n \n const {\n  StopLoss,\n  TwoPercentage,\n  Percentage30,\n  Percentage37,\n  Percentage44,\n  Percentage55\n  } = values\n  return (\n\n    \n    <div className=\"App\">\n      <div className=\"table-with-res\">\n      <h1 className=\"stock-management\">Stock Risk Management</h1>\n      <InputGroup className=\"mb-3\" onChange={updateValues}>\n    <FormControl\n      placeholder=\"Value Of Stock\"\n      aria-label=\"Value Of Stock\"\n      aria-describedby=\"basic-addon2\"\n    />\n    <InputGroup.Append>\n      <InputGroup.Text id=\"basic-addon2\">$</InputGroup.Text>\n    </InputGroup.Append>\n  </InputGroup>\n\n    <Table striped bordered variant=\"dark\">\n  <thead>\n    <tr >\n      <th>Percentage</th>\n      <th>Value</th>\n      <th>Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr className=\"bg-danger\" >\n      <td >Stop Loss</td>\n      <td className=\"valuepercentage\">{StopLoss}</td>\n      <td className=\"meaningofvalue\">Sell Stock Retard</td>\n    </tr>\n    <tr className=\"bg-success\">\n      <td>+2,3%</td>\n      <td className=\"valuepercentage\">{TwoPercentage}</td>\n      <td className=\"meaningofvalue\">GOAL!!!</td>\n    </tr>\n    <tr className=\"bg-primary\">\n      <td>+3,0%</td>\n      <td className=\"valuepercentage\">{Percentage30}</td>\n      <td className=\"meaningofvalue\">WE TAKE THOSE!!!</td>\n    </tr>\n    <tr className=\"percentage37\">\n      <td>+3,7%</td>\n      <td className=\"valuepercentage\">{Percentage37}</td>\n      <td className=\"meaningofvalue\">DON'T CUT! CONSISTENCY IS AT SERIOUS RISK</td>\n    </tr>\n    <tr className=\"bg-warning\">\n      <td>+4,4%</td>\n      <td className=\"valuepercentage\">{Percentage44}</td>\n      <td className=\"meaningofvalue\"><label className=\"text-dark\"> Don't... risk..it.</label> Don't be brave. Set stop loss at +2,3%</td>\n    </tr>\n    <tr className=\"bg-white text-dark\">\n      <td>5,5%</td>\n      <td className=\"valuepercentage\">{Percentage55}</td>\n      <td className=\"meaningofvalue percentage55\">SELL OUT. TAKE A BREAK. GTFO AND LOOK FOR INTRADAY OPPORTUNITIES.</td>\n    </tr>\n  </tbody>\n</Table>\n<h3 className=\"stock-management\">Good luck. Stay consistent. Stay Frosty...For now.</h3>\n</div>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}